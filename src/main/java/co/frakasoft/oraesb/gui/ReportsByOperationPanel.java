/*
 * ReportsPanel.java
 *
 */
package co.frakasoft.oraesb.gui;

import co.frakasoft.oraesb.beans.util.BasicESBEntityInfo;
import co.frakasoft.oraesb.beans.util.BasicMetadataInfo;
import co.frakasoft.oraesb.beans.util.BasicOperationInfo;
import co.frakasoft.oraesb.beans.util.BasicServiceInfo;
import co.frakasoft.util.TimeUtils;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionListener;
import java.util.Date;
import java.util.EventListener;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.TreeSelectionListener;
import javax.swing.text.MaskFormatter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author esalaza
 */
public class ReportsByOperationPanel extends javax.swing.JPanel {

    public static final int OPERATION_TOTAL_INSTANCES = 0; // rdbtnOperationTotalInstances -> Instancias totales por operacion
    public static final int OPERATION_TOTAL_ERROR_INSTANCES = 1; // rdbtnOperationTotalErrorInstances -> Instancias totales con errores por operacion
    public static final int DAILY_OPERATION_INSTANCES = 2; // rdbtnDailyServiceInstances -> Instancias por dia para servicio
    public static final int DAILY_OPERATION_ERROR_INSTANCES = 3; // rdbtnDailyServiceErrorInstances -> Instancias por dia con error para servicio
    public static final int ERROR_TYPE_COUNT = 4; // rdbtnErrorTypeCount -> Errores por tipo
    public static final int ERROR_TYPE_XXX_COUNT = 5; // xxx
    public static final int DAILY_OPERATION_OK_INSTANCES = 6; // rdbtnDailyServiceOKInstances -> Instancias por dia para servicio (instancias verdes)
    public static final int DAILY_OPERATION_INSTANCES_FROM_SUMMARY = 7; // rdbtnDailyServiceInstancesFromSummary -> Instancias por dia para servicio (tabla sumarizada)
    public static final int HOURLY_OPERATION_INSTANCES_FROM_SUMMARY = 8; // rdbtnHourlyServiceInstancesFromSummary -> Instancias por hora para servicio (tabla sumarizada)

    public ReportsByOperationPanel() {
        try {
            initComponents();
            initMoreComponents();
        } catch (Exception e) {
        }
    }

    private void initMoreComponents() throws Exception {
        txtStartHour.setValue("00:00:00");
        txtEndHour.setValue("00:00:00");
        operationBrowserPanel.getServiceBrowserTree().getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        operationBrowserPanel.getServiceBrowserTree().setEnabled(false);
        chkEnableServiceElection.setSelected(false);
        jxdateStartDate.setPreferredSize(new Dimension(133, 24));
        jxdateStartDate.setMaximumSize(new Dimension(133, 24));
        jxdateStartDate.setMinimumSize(new Dimension(133, 24));
        jxdateEndDate.setPreferredSize(new Dimension(133, 24));
        jxdateEndDate.setMaximumSize(new Dimension(133, 24));
        jxdateEndDate.setMinimumSize(new Dimension(133, 24));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        btngrpReports = new javax.swing.ButtonGroup();
        jRadioButton1 = new javax.swing.JRadioButton();
        pnlMainForm = new javax.swing.JPanel();
        lblStartDate = new javax.swing.JLabel();
        jxdateStartDate = new org.jdesktop.swingx.JXDatePicker();
        jxdateEndDate = new org.jdesktop.swingx.JXDatePicker();
        lblEndDate = new javax.swing.JLabel();
        lblStartHour = new javax.swing.JLabel();
        lblEndHour = new javax.swing.JLabel();
        btnGenerate = new javax.swing.JButton();
        chkEnableServiceElection = new javax.swing.JCheckBox();
        txtStartHour = new javax.swing.JFormattedTextField(createFormatter("##:##:##"));
        txtEndHour = new javax.swing.JFormattedTextField(createFormatter("##:##:##"));
        spltServReports = new javax.swing.JSplitPane();
        scrlReportOptions = new javax.swing.JScrollPane();
        pnlReportOptions = new javax.swing.JPanel();
        rdbtnOperationTotalInstances = new javax.swing.JRadioButton();
        rdbtnOperationTotalErrorInstances = new javax.swing.JRadioButton();
        rdbtnDailyServiceInstances = new javax.swing.JRadioButton();
        rdbtnDailyServiceErrorInstances = new javax.swing.JRadioButton();
        rdbtnErrorTypeCount = new javax.swing.JRadioButton();
        rdbtnDailyServiceInstancesFromSummary = new javax.swing.JRadioButton();
        rdbtnHourlyServiceInstancesFromSummary = new javax.swing.JRadioButton();
        rdbtnDailyServiceOKInstances = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        operationBrowserPanel = new co.frakasoft.oraesb.gui.OperationBrowserPanel();
        pnlReport = new javax.swing.JPanel();

        jToggleButton1.setText("jToggleButton1");

        jRadioButton1.setText("jRadioButton1");

        pnlMainForm.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pnlMainForm.setPreferredSize(new java.awt.Dimension(255, 408));

        lblStartDate.setText("Start Date");

        jxdateStartDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jxdateStartDateActionPerformed(evt);
            }
        });

        jxdateEndDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jxdateEndDateActionPerformed(evt);
            }
        });

        lblEndDate.setText("End Date");

        lblStartHour.setText("Start Time");

        lblEndHour.setText("End Time");

        btnGenerate.setText("Go");

        chkEnableServiceElection.setText("Choose service");
        chkEnableServiceElection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkEnableServiceElectionActionPerformed(evt);
            }
        });

        spltServReports.setDividerLocation(140);
        spltServReports.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        btngrpReports.add(rdbtnOperationTotalInstances);
        rdbtnOperationTotalInstances.setText("Total instances by operation");
        rdbtnOperationTotalInstances.setEnabled(false);

        btngrpReports.add(rdbtnOperationTotalErrorInstances);
        rdbtnOperationTotalErrorInstances.setText("Total instances with errors by operation");
        rdbtnOperationTotalErrorInstances.setEnabled(false);

        btngrpReports.add(rdbtnDailyServiceInstances);
        rdbtnDailyServiceInstances.setText("Daily instances for service");
        rdbtnDailyServiceInstances.setEnabled(false);

        btngrpReports.add(rdbtnDailyServiceErrorInstances);
        rdbtnDailyServiceErrorInstances.setText("Daily instances with errors for service");
        rdbtnDailyServiceErrorInstances.setEnabled(false);

        btngrpReports.add(rdbtnErrorTypeCount);
        rdbtnErrorTypeCount.setText("Errors by type");
        rdbtnErrorTypeCount.setEnabled(false);

        btngrpReports.add(rdbtnDailyServiceInstancesFromSummary);
        rdbtnDailyServiceInstancesFromSummary.setText("Daily instances for operation (summarized table)");

        btngrpReports.add(rdbtnHourlyServiceInstancesFromSummary);
        rdbtnHourlyServiceInstancesFromSummary.setText("Hourly instances for operation (summarized table)");
        rdbtnHourlyServiceInstancesFromSummary.setEnabled(false);

        btngrpReports.add(rdbtnDailyServiceOKInstances);
        rdbtnDailyServiceOKInstances.setText("Daily instances for service");
        rdbtnDailyServiceOKInstances.setEnabled(false);

        jLabel1.setForeground(new java.awt.Color(0, 153, 0));
        jLabel1.setText("(green instances)");

        javax.swing.GroupLayout pnlReportOptionsLayout = new javax.swing.GroupLayout(pnlReportOptions);
        pnlReportOptions.setLayout(pnlReportOptionsLayout);
        pnlReportOptionsLayout.setHorizontalGroup(
            pnlReportOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlReportOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlReportOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdbtnOperationTotalInstances)
                    .addComponent(rdbtnOperationTotalErrorInstances)
                    .addComponent(rdbtnDailyServiceInstances)
                    .addGroup(pnlReportOptionsLayout.createSequentialGroup()
                        .addComponent(rdbtnDailyServiceOKInstances)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1))
                    .addComponent(rdbtnDailyServiceInstancesFromSummary)
                    .addComponent(rdbtnHourlyServiceInstancesFromSummary)
                    .addComponent(rdbtnDailyServiceErrorInstances)
                    .addComponent(rdbtnErrorTypeCount))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlReportOptionsLayout.setVerticalGroup(
            pnlReportOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlReportOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdbtnOperationTotalInstances)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbtnOperationTotalErrorInstances)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbtnDailyServiceInstances)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlReportOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdbtnDailyServiceOKInstances)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbtnDailyServiceInstancesFromSummary)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbtnHourlyServiceInstancesFromSummary)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbtnDailyServiceErrorInstances)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbtnErrorTypeCount)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        scrlReportOptions.setViewportView(pnlReportOptions);

        spltServReports.setRightComponent(scrlReportOptions);
        spltServReports.setLeftComponent(operationBrowserPanel);

        javax.swing.GroupLayout pnlMainFormLayout = new javax.swing.GroupLayout(pnlMainForm);
        pnlMainForm.setLayout(pnlMainFormLayout);
        pnlMainFormLayout.setHorizontalGroup(
            pnlMainFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spltServReports, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                    .addComponent(chkEnableServiceElection)
                    .addGroup(pnlMainFormLayout.createSequentialGroup()
                        .addGroup(pnlMainFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtStartHour)
                            .addGroup(pnlMainFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pnlMainFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jxdateStartDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblStartHour, javax.swing.GroupLayout.Alignment.LEADING))
                                .addComponent(lblStartDate)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMainFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblEndDate)
                            .addComponent(lblEndHour)
                            .addComponent(jxdateEndDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtEndHour)))
                    .addComponent(btnGenerate, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlMainFormLayout.setVerticalGroup(
            pnlMainFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainFormLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStartDate)
                    .addComponent(lblEndDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jxdateStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jxdateEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStartHour)
                    .addComponent(lblEndHour))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlMainFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStartHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEndHour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkEnableServiceElection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spltServReports, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGenerate)
                .addContainerGap())
        );

        javax.swing.GroupLayout pnlReportLayout = new javax.swing.GroupLayout(pnlReport);
        pnlReport.setLayout(pnlReportLayout);
        pnlReportLayout.setHorizontalGroup(
            pnlReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 171, Short.MAX_VALUE)
        );
        pnlReportLayout.setVerticalGroup(
            pnlReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 408, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlMainForm, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlReport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlReport, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlMainForm, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jxdateStartDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jxdateStartDateActionPerformed
        // :-(
        // Se esta redimensionando solo al ingresar el panel en un JTabbedPane
        jxdateStartDate.setPreferredSize(new Dimension(133, 24));
        jxdateStartDate.setMaximumSize(new Dimension(133, 24));
        jxdateStartDate.setMinimumSize(new Dimension(133, 24));
}//GEN-LAST:event_jxdateStartDateActionPerformed

    private void jxdateEndDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jxdateEndDateActionPerformed
        // :-(
        // Se esta redimensionando solo al ingresar el panel en un JTabbedPane
        jxdateEndDate.setPreferredSize(new Dimension(133, 24));
        jxdateEndDate.setMaximumSize(new Dimension(133, 24));
        jxdateEndDate.setMinimumSize(new Dimension(133, 24));
}//GEN-LAST:event_jxdateEndDateActionPerformed

    private void chkEnableServiceElectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkEnableServiceElectionActionPerformed
        if (chkEnableServiceElection.isSelected()) {
            operationBrowserPanel.getServiceBrowserTree().setEnabled(true);
        } else {
            operationBrowserPanel.getServiceBrowserTree().setEnabled(false);
            operationBrowserPanel.getServiceBrowserTree().setSelectionPath(null);
        }
}//GEN-LAST:event_chkEnableServiceElectionActionPerformed

    // Get (no todos son JavaBean) =============================================
    public JButton getGenerateButton() {
        return btnGenerate;
    }

    public Date getEndDate() {
        return jxdateEndDate.getDate();
    }

    public Date getStartDate() {
        return jxdateStartDate.getDate();
    }

    public OperationBrowserPanel getServiceBrowserPanel() {
        return operationBrowserPanel;
    }

    public long getStartTime() {
        long time = 0;
        try {
            time = TimeUtils.parseTime(txtStartHour.getValue().toString());
        } catch (Exception e) {
            e.printStackTrace();
            time = -1;
        }
        return time;
    }

    public long getEndTime() {
        long time = 0;
        try {
            time = TimeUtils.parseTime(txtEndHour.getValue().toString());
        } catch (Exception e) {
            e.printStackTrace();
            time = -1;
        }
        return time;
    }

    public boolean isServiceElectionEnabled() {
        return operationBrowserPanel.getServiceBrowserTree().isEnabled();
    }

    public BasicESBEntityInfo getSelectedESBEntity() {
        BasicESBEntityInfo entity = null;
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode)operationBrowserPanel.getServiceBrowserTree().getLastSelectedPathComponent();
        if(selectedNode != null) {
            if(selectedNode.getUserObject() instanceof BasicESBEntityInfo) {
                entity = (BasicESBEntityInfo)selectedNode.getUserObject();
            }
        }
        return entity;
    }

    public int getReportType() {
        if(rdbtnDailyServiceErrorInstances.isSelected()) {
            return DAILY_OPERATION_ERROR_INSTANCES;
        } else if(rdbtnDailyServiceInstances.isSelected()) {
            return DAILY_OPERATION_INSTANCES;
        } else if(rdbtnErrorTypeCount.isSelected()) {
            return ERROR_TYPE_COUNT;
        } else if(rdbtnOperationTotalErrorInstances.isSelected()) {
            return OPERATION_TOTAL_ERROR_INSTANCES;
        } else if(rdbtnOperationTotalInstances.isSelected()) {
            return OPERATION_TOTAL_INSTANCES;
        } else if(rdbtnDailyServiceOKInstances.isSelected()) {
            return DAILY_OPERATION_OK_INSTANCES;
        } else if(rdbtnDailyServiceInstancesFromSummary.isSelected()) {
            return DAILY_OPERATION_INSTANCES_FROM_SUMMARY;
        } else if(rdbtnHourlyServiceInstancesFromSummary.isSelected()) {
            return HOURLY_OPERATION_INSTANCES_FROM_SUMMARY;
        }
        return -1;
    }

    // Set (no todos son JavaBean) =============================================

    public void setServices(BasicMetadataInfo metadata) {
        // Mejorar
        operationBrowserPanel.setMetadata(metadata);
        operationBrowserPanel.setOpaque(true);
        if (!chkEnableServiceElection.isSelected()) {
            operationBrowserPanel.getServiceBrowserTree().setEnabled(false);
        }
    }

    public void setActionListener(EventListener listener) {
        ActionListener actionListener = (ActionListener) listener;
        btnGenerate.addActionListener(actionListener);
        TreeSelectionListener treeSelectionListener = (TreeSelectionListener) listener;
        operationBrowserPanel.getServiceBrowserTree().addTreeSelectionListener(treeSelectionListener);
    }

    public void setChartPanel(JPanel chartPanel) {
        pnlReport.removeAll();
        chartPanel.setOpaque(true);
        BorderLayout layout = new BorderLayout();
        pnlReport.setLayout(layout);
        pnlReport.add(chartPanel, BorderLayout.CENTER);
        pnlReport.repaint();
        repaint();
    }

    // Util ====================================================================
    protected MaskFormatter createFormatter(String s) {
        MaskFormatter formatter = null;
        try {
            formatter = new MaskFormatter(s);
        } catch (java.text.ParseException exc) {
            System.err.println("Formatter is bad: " + exc.getMessage());
        }
        return formatter;
    }
    
    // GUI =====================================================================

    // Pasar a la ventana principal
    public void showInformationDialog(String message) {
        JOptionPane.showMessageDialog(this, message, "Informacion", JOptionPane.INFORMATION_MESSAGE);
    }

    public void showErrorDialog(String message) {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }

    public void showWarningDialog(String message) {
        JOptionPane.showMessageDialog(this, message, "Advertencia", JOptionPane.WARNING_MESSAGE);
    }

    // Validations =============================================================

    public boolean validateForGenerate() {
        Date startDate = getStartDate();
        Date endDate = getEndDate();
        String startHour = txtStartHour.getValue().toString();
        String endHour = txtEndHour.getValue().toString();

        if (startDate == null && endDate == null) {
            JOptionPane.showMessageDialog(
                    this,
                    "Por favor especifique la o las fechas",
                    "Faltan datos",
                    JOptionPane.INFORMATION_MESSAGE);
            return false;
        }

        if (endDate == null) {
            if (JOptionPane.showConfirmDialog(
                    this,
                    "¿Esta seguro que desea especificar solo la fecha inicial?\n" +
                    "La consulta a BD puede ser muy pesada!",
                    "Confirmacion",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE) == JOptionPane.NO_OPTION) {
                return false;
            }
        }

        if (startDate == null) {
            if (JOptionPane.showConfirmDialog(
                    this,
                    "¿Esta seguro que desea especificar solo la fecha final?\n" +
                    "La consulta a BD puede ser muy pesada!",
                    "Confirmacion",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE) == JOptionPane.NO_OPTION) {
                return false;
            }
        }

        if (startDate != null && endDate != null) {
            if (endDate.before(startDate)) {
                JOptionPane.showMessageDialog(
                        this,
                        "La fecha final es menor que la fecha inicial",
                        "Error",
                        JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
            long difference = endDate.getTime() - startDate.getTime();
            // 15 dias = 1.296'000.000 de milisegundos
            if (difference >= 1296000000L) {
                if (JOptionPane.showConfirmDialog(
                        this,
                        "¿Esta seguro que desea hacer una consulta mayor a 15 dias?\n" +
                        "La consulta a BD puede ser muy pesada!",
                        "Confirmacion",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE) == JOptionPane.NO_OPTION) {
                    return false;
                }
            }
        }

        try {
            TimeUtils.parseTime(startHour);
            TimeUtils.parseTime(endHour);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(
                    this,
                    "Por favor revise el formato de la hora ingresada",
                    "Error",
                    JOptionPane.INFORMATION_MESSAGE);
            return false;
        }

        if(     // Tiene que haber una forma menos paila...
                !rdbtnDailyServiceErrorInstances.isSelected() &&
                !rdbtnDailyServiceInstances.isSelected() &&
                !rdbtnErrorTypeCount.isSelected() &&
                !rdbtnOperationTotalErrorInstances.isSelected() &&
                !rdbtnOperationTotalInstances.isSelected() &&
                !rdbtnDailyServiceOKInstances.isSelected() &&
                !rdbtnDailyServiceInstancesFromSummary.isSelected() &&
                !rdbtnHourlyServiceInstancesFromSummary.isSelected()) {
            JOptionPane.showMessageDialog(
                    this,
                    "Por favor elija un tipo de informe",
                    "Error",
                    JOptionPane.INFORMATION_MESSAGE);
            return false;
        }

        if (isServiceElectionEnabled()) {
            BasicESBEntityInfo entity = getSelectedESBEntity();
            if(entity == null || (!(entity instanceof BasicServiceInfo) && !(entity instanceof BasicOperationInfo))) {
                JOptionPane.showMessageDialog(
                        this,
                        "Por favor elija un servicio o una operacion",
                        "Faltan datos",
                        JOptionPane.INFORMATION_MESSAGE);
                return false;
            } else if(entity instanceof BasicServiceInfo) {
                if(((BasicServiceInfo)entity).getOperations().size() > 1) {
                    if(JOptionPane.showConfirmDialog(
                            this,
                            "El servicio elejido tiene varias operaciones, ¿desea realizar el informe para todas?",
                            "Confirmacion",
                            JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
                        return false;
                    }
                }
            }
        } else {
            /*
            if (cmbState.getSelectedIndex() > 3) {
                JOptionPane.showMessageDialog(
                        this,
                        "El estado elegido solo se puede usar si se elije operacion",
                        "Estado invalido",
                        JOptionPane.INFORMATION_MESSAGE);
                return false;
            }
             */
        }

        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerate;
    private javax.swing.ButtonGroup btngrpReports;
    private javax.swing.JCheckBox chkEnableServiceElection;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JToggleButton jToggleButton1;
    private org.jdesktop.swingx.JXDatePicker jxdateEndDate;
    private org.jdesktop.swingx.JXDatePicker jxdateStartDate;
    private javax.swing.JLabel lblEndDate;
    private javax.swing.JLabel lblEndHour;
    private javax.swing.JLabel lblStartDate;
    private javax.swing.JLabel lblStartHour;
    private co.frakasoft.oraesb.gui.OperationBrowserPanel operationBrowserPanel;
    private javax.swing.JPanel pnlMainForm;
    private javax.swing.JPanel pnlReport;
    private javax.swing.JPanel pnlReportOptions;
    private javax.swing.JRadioButton rdbtnDailyServiceErrorInstances;
    private javax.swing.JRadioButton rdbtnDailyServiceInstances;
    private javax.swing.JRadioButton rdbtnDailyServiceInstancesFromSummary;
    private javax.swing.JRadioButton rdbtnDailyServiceOKInstances;
    private javax.swing.JRadioButton rdbtnErrorTypeCount;
    private javax.swing.JRadioButton rdbtnHourlyServiceInstancesFromSummary;
    private javax.swing.JRadioButton rdbtnOperationTotalErrorInstances;
    private javax.swing.JRadioButton rdbtnOperationTotalInstances;
    private javax.swing.JScrollPane scrlReportOptions;
    private javax.swing.JSplitPane spltServReports;
    private javax.swing.JFormattedTextField txtEndHour;
    private javax.swing.JFormattedTextField txtStartHour;
    // End of variables declaration//GEN-END:variables
}
