/*
 * ConnectionManagerPanel.java
 *
 */
package co.frakasoft.oraesb.gui;

import co.frakasoft.oraesb.util.AppServerConnectionInfo;
import co.frakasoft.oraesb.util.ConnectionInfo;
import co.frakasoft.oraesb.util.DatabaseConnectionInfo;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author  Administrador
 */
public class ConnectionManagerPanel
        extends javax.swing.JPanel
        implements ListSelectionListener {

    private ArrayList<ConnectionInfo> connectionsInfo = null;
    private ConnectionInfo currentConnectionInfo = null;

    /** Creates new form ConnectionManagerPanel */
    public ConnectionManagerPanel() {
        initComponents();
        lstConnections.addListSelectionListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrlLstConnections = new javax.swing.JScrollPane();
        lstConnections = new javax.swing.JList();
        pnlAppSrv = new javax.swing.JPanel();
        lblAppSrvHost = new javax.swing.JLabel();
        txtAppSrvHost = new javax.swing.JTextField();
        lblAppSrvPort = new javax.swing.JLabel();
        txtAppSrvPort = new javax.swing.JTextField();
        lblAppSrvUser = new javax.swing.JLabel();
        txtAppSrvUser = new javax.swing.JTextField();
        lblAppSrvPassword = new javax.swing.JLabel();
        txtAppSrvPassword = new javax.swing.JPasswordField();
        btnAppSrvTest = new javax.swing.JButton();
        lblAppSrvTest = new javax.swing.JLabel();
        pnlDB = new javax.swing.JPanel();
        lblDBHost = new javax.swing.JLabel();
        txtDBHost = new javax.swing.JTextField();
        lblDBPort = new javax.swing.JLabel();
        txtDBPort = new javax.swing.JTextField();
        lblDBUser = new javax.swing.JLabel();
        txtDBUser = new javax.swing.JTextField();
        lblDBPasword = new javax.swing.JLabel();
        txtDBPasword = new javax.swing.JPasswordField();
        lblDBSid = new javax.swing.JLabel();
        txtDBSid = new javax.swing.JTextField();
        btnDBTest = new javax.swing.JButton();
        lblDatabaseTest = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnConnect = new javax.swing.JButton();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();

        lstConnections.setModel(new DefaultListModel());
        lstConnections.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scrlLstConnections.setViewportView(lstConnections);

        pnlAppSrv.setBorder(javax.swing.BorderFactory.createTitledBorder("Application Server"));

        lblAppSrvHost.setText("Hostname/IP");

        lblAppSrvPort.setText("Port");

        lblAppSrvUser.setText("Username");

        lblAppSrvPassword.setText("Password");

        btnAppSrvTest.setText("Test");

        javax.swing.GroupLayout pnlAppSrvLayout = new javax.swing.GroupLayout(pnlAppSrv);
        pnlAppSrv.setLayout(pnlAppSrvLayout);
        pnlAppSrvLayout.setHorizontalGroup(
            pnlAppSrvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAppSrvLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlAppSrvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAppSrvHost)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAppSrvLayout.createSequentialGroup()
                        .addComponent(lblAppSrvTest, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAppSrvTest))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlAppSrvLayout.createSequentialGroup()
                        .addGroup(pnlAppSrvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblAppSrvPassword)
                            .addComponent(lblAppSrvUser)
                            .addComponent(lblAppSrvPort))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                        .addGroup(pnlAppSrvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtAppSrvHost, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtAppSrvPort, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtAppSrvUser, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtAppSrvPassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE))))
                .addContainerGap())
        );
        pnlAppSrvLayout.setVerticalGroup(
            pnlAppSrvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlAppSrvLayout.createSequentialGroup()
                .addGroup(pnlAppSrvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAppSrvHost)
                    .addComponent(txtAppSrvHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAppSrvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAppSrvPort)
                    .addComponent(txtAppSrvPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAppSrvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAppSrvUser)
                    .addComponent(txtAppSrvUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlAppSrvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAppSrvPassword)
                    .addComponent(txtAppSrvPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(pnlAppSrvLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAppSrvTest)
                    .addComponent(lblAppSrvTest))
                .addContainerGap())
        );

        pnlDB.setBorder(javax.swing.BorderFactory.createTitledBorder("Database (ORAESB)"));

        lblDBHost.setText("Hostname/IP");

        lblDBPort.setText("Port");

        lblDBUser.setText("Username");

        lblDBPasword.setText("Password");

        lblDBSid.setText("SID/Service");

        btnDBTest.setText("Test");

        javax.swing.GroupLayout pnlDBLayout = new javax.swing.GroupLayout(pnlDB);
        pnlDB.setLayout(pnlDBLayout);
        pnlDBLayout.setHorizontalGroup(
            pnlDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDBLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDBHost)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDBLayout.createSequentialGroup()
                        .addComponent(lblDatabaseTest, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDBTest))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlDBLayout.createSequentialGroup()
                        .addGroup(pnlDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDBPort)
                            .addComponent(lblDBSid)
                            .addComponent(lblDBPasword)
                            .addComponent(lblDBUser))
                        .addGap(23, 23, 23)
                        .addGroup(pnlDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDBSid, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                            .addComponent(txtDBPasword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                            .addComponent(txtDBUser, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                            .addComponent(txtDBPort, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                            .addComponent(txtDBHost, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE))))
                .addContainerGap())
        );
        pnlDBLayout.setVerticalGroup(
            pnlDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDBLayout.createSequentialGroup()
                .addGroup(pnlDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDBHost)
                    .addComponent(txtDBHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDBPort)
                    .addComponent(txtDBPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDBSid)
                    .addComponent(txtDBSid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDBUser)
                    .addComponent(txtDBUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDBPasword)
                    .addComponent(txtDBPasword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlDBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDBTest)
                    .addComponent(lblDatabaseTest))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnSave.setText("Save");
        btnSave.setPreferredSize(new java.awt.Dimension(85, 23));

        btnDelete.setText("Delete");
        btnDelete.setPreferredSize(new java.awt.Dimension(85, 23));

        btnCancel.setText("Cancel");
        btnCancel.setPreferredSize(new java.awt.Dimension(85, 23));

        btnConnect.setText("Connect");

        lblName.setText("Connections");

        lblStatus.setPreferredSize(new java.awt.Dimension(34, 14));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrlLstConnections, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(lblName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE))
                    .addComponent(pnlAppSrv, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlDB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblStatus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnConnect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrlLstConnections, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblName)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pnlAppSrv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlDB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnConnect))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public JButton getBtnAppSrvTest() {
        return btnAppSrvTest;
    }

    public JButton getBtnCancel() {
        return btnCancel;
    }

    public JButton getBtnConnect() {
        return btnConnect;
    }

    public JButton getBtnDBTest() {
        return btnDBTest;
    }

    public JButton getBtnDelete() {
        return btnDelete;
    }

    public JButton getBtnSave() {
        return btnSave;
    }

    public JList getLstConnections() {
        return lstConnections;
    }

    public String getAppServerHost() {
        return txtAppSrvHost.getText();
    }

    public String getAppServerPort() {
        return txtAppSrvPort.getText();
    }

    public String getAppServerUser() {
        return new String(txtAppSrvUser.getText());
    }

    public String getAppServerPassword() {
        return new String(txtAppSrvPassword.getPassword());
    }

    public String getDBHost() {
        return txtDBHost.getText();
    }

    public String getDBPort() {
        return txtDBPort.getText();
    }

    public String getDBSid() {
        return txtDBSid.getText();
    }

    public String getDBUser() {
        return txtDBUser.getText();
    }

    public String getDBPassword() {
        return new String(txtDBPasword.getPassword());
    }

    public ArrayList<ConnectionInfo> getConnectionsInfo() {
        return connectionsInfo;
    }

    public void setConnectionsInfo(ArrayList<ConnectionInfo> connectionsInfo) {
        this.connectionsInfo = connectionsInfo;
        DefaultListModel listModel = (DefaultListModel) lstConnections.getModel();
        listModel.clear();
        for (ConnectionInfo connectionInfo : connectionsInfo) {
            listModel.addElement(connectionInfo.getName());
        }
        lstConnections.setSelectedIndex(0);
    }

    public void valueChanged(ListSelectionEvent e) {
        if (!e.getValueIsAdjusting()) {
            if (lstConnections.getSelectedIndex() == -1) {
                //No selection
            } else {
                //Selection
                currentConnectionInfo = null;
                String selectedServer = (String) lstConnections.getSelectedValue();
                for (ConnectionInfo connectionInfo : connectionsInfo) {
                    if (connectionInfo.getName().equals(selectedServer)) {
                        currentConnectionInfo = connectionInfo;
                        updateGUIWithConnectionInfoValues(connectionInfo);
                    }
                }
            }
        }
    }

    public void updateGUIWithConnectionInfoValues(ConnectionInfo connectionInfo) {
        txtName.setText(connectionInfo.getName().trim());
        txtAppSrvHost.setText(connectionInfo.getAppServerConnectionInfo().getHost().trim());
        txtAppSrvPassword.setText(connectionInfo.getAppServerConnectionInfo().getPassword());
        txtAppSrvPort.setText(connectionInfo.getAppServerConnectionInfo().getPort().trim());
        txtAppSrvUser.setText(connectionInfo.getAppServerConnectionInfo().getUsername().trim());
        txtDBHost.setText(connectionInfo.getDatabaseConnectionInfo().getHost().trim());
        txtDBPort.setText(connectionInfo.getDatabaseConnectionInfo().getPort().trim());
        txtDBPasword.setText(connectionInfo.getDatabaseConnectionInfo().getPassword());
        txtDBSid.setText(connectionInfo.getDatabaseConnectionInfo().getSid().trim());
        txtDBUser.setText(connectionInfo.getDatabaseConnectionInfo().getUsername().trim());
    }

    private void initializeConnectionInfoWithGUIFields(ConnectionInfo connectionInfo) {
        if (connectionInfo == null) {
            connectionInfo = new ConnectionInfo();
        }
        connectionInfo.setName(txtName.getText().trim());

        AppServerConnectionInfo appServerConnectionInfo = connectionInfo.getAppServerConnectionInfo();
        if (appServerConnectionInfo == null) {
            appServerConnectionInfo = new AppServerConnectionInfo();
            connectionInfo.setAppServerConnectionInfo(appServerConnectionInfo);
        }
        appServerConnectionInfo.setHost(txtAppSrvHost.getText().trim());
        appServerConnectionInfo.setPort(txtAppSrvPort.getText().trim());
        appServerConnectionInfo.setUsername(txtAppSrvUser.getText().trim());
        appServerConnectionInfo.setPassword(new String(txtAppSrvPassword.getPassword()));

        DatabaseConnectionInfo databaseConnectionInfo = connectionInfo.getDatabaseConnectionInfo();
        if (databaseConnectionInfo == null) {
            databaseConnectionInfo = new DatabaseConnectionInfo();
            connectionInfo.setDatabaseConnectionInfo(databaseConnectionInfo);
        }
        databaseConnectionInfo.setHost(txtDBHost.getText().trim());
        databaseConnectionInfo.setPort(txtDBPort.getText().trim());
        databaseConnectionInfo.setUsername(txtDBUser.getText().trim());
        databaseConnectionInfo.setPassword(new String(txtDBPasword.getPassword()));
        databaseConnectionInfo.setSid(txtDBSid.getText().trim());
    }
    
    public void deleteSelectedConnectionInfo() {
        ConnectionInfo c = getCurrentConnectionInfo();
        if(c == null) return;
        ((DefaultListModel)lstConnections.getModel()).removeElement(c.getName());
        if(connectionsInfo.size() == 1) {
            clearFields();
            btnConnect.setEnabled(false);
            btnDelete.setEnabled(false);
        } else {
            lstConnections.setSelectedIndex(0);
        }
        connectionsInfo.remove(c);
    }

    /**
     *
     * @return el ConnectionInfo creado o actualizado
     */
    public ConnectionInfo createOrSaveConnectionInfo() {
        if(!validateFields()) return null;

        btnConnect.setEnabled(true);
        btnDelete.setEnabled(true);

        ConnectionInfo connectionInfo = null;
        String actualConfName = txtName.getText().trim();
        ConnectionInfo selectedConnectionInfo = null;

        if (connectionsInfo == null) {
            connectionsInfo = new ArrayList<ConnectionInfo>();
        }
        selectedConnectionInfo = ConnectionInfo.getConnectionInfoByName(actualConfName, connectionsInfo);
        
        if (selectedConnectionInfo == null) {
            connectionInfo = new ConnectionInfo();
            initializeConnectionInfoWithGUIFields(connectionInfo);
            ((DefaultListModel) lstConnections.getModel()).addElement(actualConfName);
            connectionsInfo.add(connectionInfo);
            return connectionInfo;
        } else {
            initializeConnectionInfoWithGUIFields(selectedConnectionInfo);
            return selectedConnectionInfo;
        }
    }

    public boolean validateFields() {
        boolean isValid = true;
        String message = "";
        
        String appSrvPassword = new String(txtAppSrvPassword.getPassword());
        String databasePassword = new String(txtDBPasword.getPassword());
        
        if(txtName.getText() == null || txtName.getText().trim().equals("")) {
            isValid = false;
            message = "Debe ingresar un nombre para la configuracion";
        } else if(txtAppSrvHost.getText() == null || txtAppSrvHost.getText().trim().equals("")) {
            isValid = false;
            message = "Debe ingresar un host de servidor de aplicaciones";
        } else if(txtAppSrvPort.getText() == null || txtAppSrvPort.getText().trim().equals("")) {
            isValid = false;
            message = "Debe ingresar un puerto de servidor de aplicaciones";
        } else if(txtAppSrvUser.getText() == null || txtAppSrvUser.getText().trim().equals("")) {
            isValid = false;
            message = "Debe ingresar un usuario de servidor de aplicaciones";
        } else if(appSrvPassword == null || appSrvPassword.equals("")) {
            isValid = false;
            message = "Debe ingresar un password de servidor de aplicaciones";
        }  else if(txtDBHost.getText() == null || txtDBHost.getText().trim().equals("")) {
            isValid = false;
            message = "Debe ingresar un host de base de datos";
        } else if(txtDBPort.getText() == null || txtDBPort.getText().trim().equals("")) {
            isValid = false;
            message = "Debe ingresar un puerto de base de datos";
        } else if(txtDBSid.getText() == null || txtDBSid.getText().trim().equals("")) {
            isValid = false;
            message = "Debe ingresar un sid de base de datos";
        } else if(txtDBUser.getText() == null || txtDBUser.getText().trim().equals("")) {
            isValid = false;
            message = "Debe ingresar un usuario de base de datos";
        } else if(databasePassword == null || databasePassword.equals("")) {
            isValid = false;
            message = "Debe ingresar un password de base de datos";
        } 
        
        if(!isValid) {
            lblStatus.setText(message);
            lblStatus.setForeground(Color.RED);
        } else {
            lblStatus.setText("");
        }
        
        return isValid;
    }
    
    public void clearFields() {
        txtName.setText("");
        txtAppSrvHost.setText("");
        txtAppSrvPassword.setText("");
        txtAppSrvPort.setText("");
        txtAppSrvUser.setText("");
        txtDBHost.setText("");
        txtDBPort.setText("");
        txtDBPasword.setText("");
        txtDBSid.setText("");
        txtDBUser.setText("");
    }

    public void setActionListener(ActionListener l) {
        btnAppSrvTest.addActionListener(l);
        btnCancel.addActionListener(l);
        btnConnect.addActionListener(l);
        btnDBTest.addActionListener(l);
        btnDelete.addActionListener(l);
        btnSave.addActionListener(l);
    }
    
    public void setStatus(String status, boolean error) {
        if(error) lblStatus.setForeground(Color.RED);
        else lblStatus.setForeground(Color.GREEN);
        lblStatus.setText(status);
    }
    
    public void setAppServerConnectionTestStatus(String status, boolean error) {
        if(error) lblAppSrvTest.setForeground(Color.RED);
        else lblAppSrvTest.setForeground(Color.GREEN);
        lblAppSrvTest.setText(status);
    }
    
    public void setDatabaseConnectionTestStatus(String status, boolean error) {
        if(error) lblDatabaseTest.setForeground(Color.RED);
        else lblDatabaseTest.setForeground(Color.GREEN);
        lblDatabaseTest.setText(status);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAppSrvTest;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnConnect;
    private javax.swing.JButton btnDBTest;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel lblAppSrvHost;
    private javax.swing.JLabel lblAppSrvPassword;
    private javax.swing.JLabel lblAppSrvPort;
    private javax.swing.JLabel lblAppSrvTest;
    private javax.swing.JLabel lblAppSrvUser;
    private javax.swing.JLabel lblDBHost;
    private javax.swing.JLabel lblDBPasword;
    private javax.swing.JLabel lblDBPort;
    private javax.swing.JLabel lblDBSid;
    private javax.swing.JLabel lblDBUser;
    private javax.swing.JLabel lblDatabaseTest;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JList lstConnections;
    private javax.swing.JPanel pnlAppSrv;
    private javax.swing.JPanel pnlDB;
    private javax.swing.JScrollPane scrlLstConnections;
    private javax.swing.JTextField txtAppSrvHost;
    private javax.swing.JPasswordField txtAppSrvPassword;
    private javax.swing.JTextField txtAppSrvPort;
    private javax.swing.JTextField txtAppSrvUser;
    private javax.swing.JTextField txtDBHost;
    private javax.swing.JPasswordField txtDBPasword;
    private javax.swing.JTextField txtDBPort;
    private javax.swing.JTextField txtDBSid;
    private javax.swing.JTextField txtDBUser;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the currentConnectionInfo
     */
    public ConnectionInfo getCurrentConnectionInfo() {
        return currentConnectionInfo;
    }
}
